@page "/"

@using System.Security.Cryptography.X509Certificates
@inherits OwningComponentBase<ImageSearchEngine>
@inject IJSRuntime IjsRuntime
@inject NavigationManager NavigationManager

@{
    var uploaded = !string.IsNullOrEmpty(_uploadedPath);
    var haveResult = _matchImages.Count > 0;
}


<div class="container @(uploaded ? "d-none" : "")">
    <div class="d-flex justify-content-center py-3">
        <div class="col-md-6">
            <div class="custom-file">
                <InputFile OnChange="OnInputFileChange" type="file" class="custom-file-input" id="inputImage" required />
                <label class="custom-file-label" for="inputImage" id="inputImageLabel">
                    @(_file?.Name ?? "Upload file to search ...")
                </label>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-9">
            <!-- <h3>Demo:</h3> -->
            <div class="docs-demo">
                <div class="img-container">
                    <img id="previewImg" src="@DefaultImagePath" alt="Picture">
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <!-- <h3>Preview:</h3> -->
            <div class="docs-preview clearfix">
                <div class="img-preview preview-lg"></div>
            </div>

            <!-- <h3>Data:</h3> -->
            <div class="docs-data">
                <div class="input-group input-group-sm">
                    <span class="input-group-prepend">
                        <label class="input-group-text" for="dataX">X</label>
                    </span>
                    <input type="text" class="form-control" id="dataX" placeholder="x" readonly>
                    <span class="input-group-append">
                        <span class="input-group-text">px</span>
                    </span>
                </div>
                <div class="input-group input-group-sm">
                    <span class="input-group-prepend">
                        <label class="input-group-text" for="dataY">Y</label>
                    </span>
                    <input type="text" class="form-control" id="dataY" placeholder="y" readonly>
                    <span class="input-group-append">
                        <span class="input-group-text">px</span>
                    </span>
                </div>
                <div class="input-group input-group-sm">
                    <span class="input-group-prepend">
                        <label class="input-group-text" for="dataWidth">Width</label>
                    </span>
                    <input type="text" class="form-control" id="dataWidth" placeholder="width" readonly>
                    <span class="input-group-append">
                        <span class="input-group-text">px</span>
                    </span>
                </div>
                <div class="input-group input-group-sm">
                    <span class="input-group-prepend">
                        <label class="input-group-text" for="dataHeight">Height</label>
                    </span>
                    <input type="text" class="form-control" id="dataHeight" placeholder="height" readonly>
                    <span class="input-group-append">
                        <span class="input-group-text">px</span>
                    </span>
                </div>

                <div class="input-group input-group-sm" hidden>
                    <span class="input-group-prepend">
                        <label class="input-group-text" for="dataRotate">Rotate</label>
                    </span>
                    <input type="text" class="form-control" id="dataRotate" placeholder="rotate" readonly>
                    <span class="input-group-append">
                        <span class="input-group-text">deg</span>
                    </span>
                </div>
                <div class="input-group input-group-sm" hidden>
                    <span class="input-group-prepend">
                        <label class="input-group-text" for="dataScaleX">ScaleX</label>
                    </span>
                    <input type="text" class="form-control" id="dataScaleX" placeholder="scaleX" readonly>
                </div>
                <div class="input-group input-group-sm" hidden>
                    <span class="input-group-prepend">
                        <label class="input-group-text" for="dataScaleY">ScaleY</label>
                    </span>
                    <input type="text" class="form-control" id="dataScaleY" placeholder="scaleY" readonly>
                </div>
            </div>
        </div>
    </div>
    <div class="row" id="actions">
        <div class="col-md-9 docs-buttons">
            <!-- <h3>Toolbar:</h3> -->
            <div class="btn-group">
                <button type="button" class="btn btn-secondary" data-method="zoom" data-option="0.1" title="Zoom In">
                    <span class="docs-tooltip" data-toggle="tooltip" title="Zoom In">
                        <span class="fa fa-search-plus"></span>
                    </span>
                </button>
                <button type="button" class="btn btn-secondary" data-method="zoom" data-option="-0.1" title="Zoom Out">
                    <span class="docs-tooltip" data-toggle="tooltip" title="Zoom Out">
                        <span class="fa fa-search-minus"></span>
                    </span>
                </button>
            </div>

            <div class="btn-group">
                <button type="button" class="btn btn-secondary" data-method="move" data-option="-10" data-second-option="0" title="Move Left">
                    <span class="docs-tooltip" data-toggle="tooltip" title="Move Left">
                        <span class="fa fa-arrow-left"></span>
                    </span>
                </button>
                <button type="button" class="btn btn-secondary" data-method="move" data-option="10" data-second-option="0" title="Move Right">
                    <span class="docs-tooltip" data-toggle="tooltip" title="Move Right">
                        <span class="fa fa-arrow-right"></span>
                    </span>
                </button>
                <button type="button" class="btn btn-secondary" data-method="move" data-option="0" data-second-option="-10" title="Move Up">
                    <span class="docs-tooltip" data-toggle="tooltip" title="Move Up">
                        <span class="fa fa-arrow-up"></span>
                    </span>
                </button>
                <button type="button" class="btn btn-secondary" data-method="move" data-option="0" data-second-option="10" title="Move Down">
                    <span class="docs-tooltip" data-toggle="tooltip" title="Move Down">
                        <span class="fa fa-arrow-down"></span>
                    </span>
                </button>
            </div>

            <div class="btn-group btn-group-crop">
                <button type="button" class="btn btn-secondary" data-method="getCroppedCanvas" data-option="{ &quot;maxWidth&quot;: 4096, &quot;maxHeight&quot;: 4096 }">
                    <span class="docs-tooltip" data-toggle="tooltip" title="Download cropped image">
                        Download
                    </span>
                </button>
            </div>

            <div class="btn-group">
                <button @onclick="Confirm" type="button" class="btn btn-primary">Crop and Search</button>
            </div>

            <!-- Show the cropped image in modal -->
            <div class="modal fade docs-cropped" id="getCroppedCanvasModal" role="dialog" aria-hidden="true" aria-labelledby="getCroppedCanvasTitle" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="getCroppedCanvasTitle">Crop and Search</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body"></div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            <a class="btn btn-primary" id="download" href="javascript:void(0);" download="cropped.jpg">Download</a>
                        </div>
                    </div>
                </div>
            </div><!-- /.modal -->

        </div><!-- /.docs-buttons -->

        <div class="col-md-3 docs-toggles">
            <!-- <h3>Toggles:</h3> -->
            <div class="btn-group d-flex flex-nowrap" data-toggle="buttons">
                <label class="btn btn-secondary">
                    <input type="radio" class="sr-only" id="aspectRatio1" name="aspectRatio" value="1.7777777777777777">
                    <span class="docs-tooltip" data-toggle="tooltip" title="aspectRatio: 16 / 9">
                        16:9
                    </span>
                </label>
                <label class="btn btn-secondary">
                    <input type="radio" class="sr-only" id="aspectRatio2" name="aspectRatio" value="1.3333333333333333">
                    <span class="docs-tooltip" data-toggle="tooltip" title="aspectRatio: 4 / 3">
                        4:3
                    </span>
                </label>
                <label class="btn btn-secondary">
                    <input type="radio" class="sr-only" id="aspectRatio3" name="aspectRatio" value="1">
                    <span class="docs-tooltip" data-toggle="tooltip" title="aspectRatio: 1 / 1">
                        1:1
                    </span>
                </label>
                <label class="btn btn-secondary">
                    <input type="radio" class="sr-only" id="aspectRatio4" name="aspectRatio" value="0.6666666666666666">
                    <span class="docs-tooltip" data-toggle="tooltip" title="aspectRatio: 2 / 3">
                        2:3
                    </span>
                </label>
                <label class="btn btn-secondary active">
                    <input type="radio" class="sr-only" id="aspectRatio5" name="aspectRatio" value="NaN">
                    <span class="docs-tooltip" data-toggle="tooltip" title="aspectRatio: NaN">
                        Free
                    </span>
                </label>
            </div>

        </div><!-- /.docs-toggles -->

    </div>
</div>


@if (uploaded && !haveResult)
{
    <div class="alert alert-info" role="alert">
        Please wait! Searching ...
    </div>
}

@if (haveResult)
{
    <div class="d-flex flex-row justify-content-center align-items-center p-2">
        <div class="col-md-3 alert alert-success text-center" style="margin: 0">
            There are <b>@_matchImages.Count</b> images found!
        </div>
        <div class="p-2">
            <button @onclick="Clear" class="btn btn-link">Click here to clear result</button>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <ImageDataList PageSize="10" Images="@_matchImages"></ImageDataList>
        </div>
    </div>
}

@code {

    private IBrowserFile _file;
    private string _uploadedPath;
    private List<string> _matchImages = new();

    public string DefaultImagePath = "oxbuild_images/all_souls_000002.jpg";


    protected override Task OnInitializedAsync()
    {
        _uploadedPath = string.Empty;
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await IjsRuntime.InvokeVoidAsync("LoadCropperJs");
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        await IjsRuntime.InvokeVoidAsync("SelectedImageChanged");
        _file = e.File;
    }

    [JSInvokable]
    public Task UpdateImagePath(string filePath)
    {
        _uploadedPath = filePath;
        StateHasChanged();
        _matchImages = Service.GetMatchImages(_uploadedPath);
        if (_matchImages.Count == 0)
            Clear();
        StateHasChanged();
        return Task.CompletedTask;
    }

    public Task Clear()
    {
        NavigationManager.NavigateTo("/", true);
        return Task.CompletedTask;
    }

    public async Task Confirm()
    {
        await IjsRuntime.InvokeVoidAsync("UploadCroppedImages", DotNetObjectReference.Create(this));
    }

}